{"version":3,"sources":["Components/Page.js","App.js","reportWebVitals.js","index.js"],"names":["Page","props","myChangeHandler","event","setState","tweet","target","value","state","emoji","loading","handler","bind","text","replace","match","String","fromCharCode","parseInt","this","axios","post","then","res","unicodeToChar","data","catch","error","console","log","finally","Container","Row","style","backgroundColor","Col","color","height","InputGroup","Prepend","Text","FormControl","as","onChange","aria-label","Button","variant","onClick","textAlign","size","width","Card","bg","className","Header","Body","Title","fontSize","Component","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e86ba939.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {InputGroup,FormControl,Container,Row, Col,Button,Card} from 'react-bootstrap'\r\nimport axios from 'axios'\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nclass  Page extends Component{\r\n  constructor(props) {\r\n    super(props)\r\n    this.state={\r\n        tweet:'',\r\n        emoji:'',\r\n        loading: false,\r\n    }\r\n    this.handler = this.handler.bind(this);\r\n}\r\n\r\n\r\nmyChangeHandler = (event) => {\r\n    this.setState({\r\n        tweet: event.target.value\r\n    });\r\n  }\r\n\r\nunicodeToChar(text) {\r\n    return text.replace(/\\\\u[\\dA-F]{4}/gi, \r\n           function (match) {\r\n                return String.fromCharCode(parseInt(match.replace(/\\\\u/g, ''), 16));\r\n           });\r\n }\r\n \r\n\r\nhandler(){\r\n    this.setState({\r\n        loading:true\r\n    })\r\n    axios.post('/api',{tweet:this.state.tweet})\r\n                .then(res=>{\r\n                    this.setState({\r\n                        emoji:this.unicodeToChar(res.data.emoji)\r\n                    })\r\n                })\r\n                .catch(error=>{\r\n                    console.log(error)\r\n                })\r\n                .finally(()=>\r\n                {\r\n                    this.setState({\r\n                        loading:false\r\n                    })\r\n                })\r\n}\r\n\r\nrender() {\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Row style={{backgroundColor:'#CEF2FF'}}>\r\n                    <Col >\r\n                        <h2 style={{color:'#122BAB'}}>Tweet To Emoji</h2>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col style={{height:'50px'}}></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                <InputGroup.Text>tweet</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <FormControl as=\"textarea\" onChange={this.myChangeHandler} aria-label=\"With textarea\" />\r\n                            </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col style={{height:'20px'}}></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button variant=\"outline-primary\" onClick={this.handler}>Find suggested emoji</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col style={{height:'20px'}}></Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                        <ClipLoader textAlign='center'\r\n                            size={100}\r\n                            color={\"blue\"}\r\n                            loading={this.state.loading}\r\n                        />\r\n                  </Col>\r\n              </Row>\r\n                {this.state.emoji!==''  &&\r\n                 <Row  style={{textAlign:'center'}}>\r\n                    <Col style={{ width: '18rem' }}></Col>\r\n                    <Col>\r\n                        <Card\r\n                            bg='Primary'\r\n                            style={{ width: '18rem' }}\r\n                            className=\"mb-2\"\r\n                        >\r\n                            <Card.Header>Emoji</Card.Header>\r\n                            <Card.Body>\r\n                            <Card.Title ><span style={{fontSize:'35px'}}>{this.state.emoji}</span></Card.Title>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col style={{ width: '18rem' }}></Col>\r\n                </Row>\r\n                }\r\n            </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n}\r\n\r\nexport default Page;","import Page from './Components/Page'\nimport './App.css';\nimport   {Route,Switch} from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n            <Switch>\n              <Route path='/' exact component={Page}/>\n            </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter}from 'react-router-dom'\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n  </React.StrictMode>\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}